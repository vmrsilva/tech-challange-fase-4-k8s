##volumes
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: docker-sc
provisioner: docker.io/hostpath
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-pv
spec:
  storageClassName: docker-sc
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/run/desktop/mnt/host/c/Users/valmi/TC-Data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  storageClassName: docker-sc
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Mi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sqlserver-pvc
spec:
  storageClassName: docker-sc
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi
---

# configMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    name: prometheus-config
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s

    scrape_configs:
      - job_name: "fiap-prometheus-metrics-regions"
        metrics_path: /metrics
        static_configs:
          - targets: ["sv-region-api:5050"]
      - job_name: "fiap-prometheus-metrics-contacts"
        metrics_path: /metrics
        static_configs:
          - targets: ["sv-contact-api:4040"]
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
data:
  datasource.yml: |-
    apiVersion: 1
    datasources:
      - name: prometheus-metrics
      editable: true
      type: prometheus
      access: proxy
      url: sv-prometheus:9090
      isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: regionconsumer-env-config
data:
  MassTransit__QueueCreateRegion: region-insert-queue
  MassTransit__Server: rabbitmq-service
  MassTransit__User: guest
  MassTransit__Password: guest
  ConnectionStrings__Database: "Server=sqlserver,1433;Database=techchallengeregion;User Id=sa;Password=YourStrong!Passw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;"
  ConnectionStrings__Cache: sv-redis:6379
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: contactconsumer-env-config
data:
  MassTransit__QueueCreateRegion: contact-insert-queue
  MassTransit__Server: rabbitmq-service
  MassTransit__User: guest
  MassTransit__Password: guest
  ConnectionStrings__Database: "Server=sqlserver,1433;Database=techchallengecontact;User Id=sa;Password=YourStrong!Passw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;"
  ConnectionStrings__Cache: sv-redis:6379
  Integrations__RegionApiUrl: http://sv-region-api:5050/api
---

# Deployments and Services for Tech Challenge Phase 4

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sqlserver
  annotations:
    description: "Deployment para SQL Server"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sqlserver
  template:
    metadata:
      labels:
        app: sqlserver
    spec:
      containers:
      - name: sqlserver
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: SA_PASSWORD
          value: "YourStrong!Passw0rd"  # Deve corresponder à senha no ConfigMap
        - name: MSSQL_PID
          value: "Express"  # Ou outra edição, se necessário
        ports:
        - containerPort: 1433
        volumeMounts:
        - name: sqlserver-data
          mountPath: /var/opt/mssql
      volumes:
      - name: sqlserver-data
        persistentVolumeClaim:
          claimName: sqlserver-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: regionservice
  annotations:
    description: "Region Service"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: regionservice
  template:
    metadata:
      labels:
        app: regionservice
    spec:
      containers:
      - name: regionservice
        image: vmrsilva/techchallange-fase4-region
        envFrom:
          - configMapRef:
              name: regionconsumer-env-config
        ports:
        - containerPort: 8080
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -z rabbitmq-service 5672; do echo waiting for rabbitmq; sleep 2; done;']

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: contactservice
  annotations:
    description: "Contact Service"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: contactservice
  template:
    metadata:
      labels:
        app: contactservice
    spec:
      containers:
      - name: contactservice
        image: vmrsilva/techchallange-fase4-contact:latest
        envFrom:
          - configMapRef:
              name: contactconsumer-env-config
        ports:
        - containerPort: 8080
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -z rabbitmq-service 5672; do echo waiting for rabbitmq; sleep 2; done;']


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: regionconsumer
  annotations:
    description: "Deployment for consumer region"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: regionconsumer
  template:
    metadata:
      labels:
        app: regionconsumer
    spec:
      containers:
      - name: regionconsumer
        image: vmrsilva/techchallange-fase4-region-consumer
        envFrom:
            - configMapRef:
                name: regionconsumer-env-config
        ports:
        - containerPort: 5050
        resources:
          requests:
            memory: "100Mi"
          limits:
            memory: "100Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: contactconsumer
  annotations:
    description: "Deployment for consumer contacts"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contactconsumer
  template:
    metadata:
      labels:
        app: contactconsumer
    spec:
      containers:
      - name: contactconsumer
        image: vmrsilva/techchallange-fase4-contact-consumer
        envFrom:
          - configMapRef:
              name: contactconsumer-env-config
        ports:
        - containerPort: 6060
        resources:
          requests:
            memory: "100Mi"
          limits:
            memory: "100Mi"
      initContainers:
        - name: wait-for-rabbitmq
          image: busybox
          command: ['sh', '-c', 'until nc -z rabbitmq-service 5672; do echo waiting for rabbitmq; sleep 2; done;']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-app
  annotations:
    description: "Deployment for rabbitmq"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq-app
  template:
    metadata:
      labels:
        app: rabbitmq-app
    spec:
      containers:
      - name: rabbitmq-app
        image: rabbitmq:3-management
        ports:
        - containerPort: 5672
        - containerPort: 15672
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-app
  annotations:
    description: "Deployment for prometheus"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-app
  template:
    metadata:
      labels:
        app: prometheus-app
    spec:
      containers:
      - name: prometheus-coll
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
            defaultMode: 420
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-app
  annotations:
    description: "Deployment for grafana"
spec:
  replicas: 1
  selector:
    matchLabels:
       app: grafana-app
  template:
    metadata:
     labels:
       app: grafana-app
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        # args:
        # - '--config=/grafana.ini'
        ports:
        - containerPort: 3000
        # securityContext:
        #   runAsUser: 0
        volumeMounts:
            - name: config-volume
              mountPath: /var/lib/grafana
      volumes:
        - name: config-volume
          persistentVolumeClaim:
            claimName: grafana-pvc
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  annotations:
    description: "Deployment for Redis"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
---

## Services for Tech Challenge Phase 4
apiVersion: v1
kind: Service
metadata:
  name: sv-region-api
spec:
  type: NodePort
  selector:
    app: regionservice
  ports:
  - protocol: TCP
    port: 5050
    targetPort: 8080
    nodePort: 30080
---
apiVersion: v1
kind: Service
metadata:
  name: sv-contact-api
spec:
  type: NodePort
  selector:
    app: contactservice
  ports:
  - protocol: TCP
    port: 4040
    targetPort: 8080
    nodePort: 30071
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  type: NodePort
  selector:
    app: rabbitmq-app
  ports:
  - protocol: TCP
    port: 5672
    targetPort: 5672
    nodePort: 30070
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-ui
spec:
  type: NodePort
  selector:
    app: rabbitmq-app
  ports:
  - protocol: TCP
    port: 15672
    targetPort: 15672
    nodePort: 30060
---
apiVersion: v1
kind: Service
metadata:
  name: sv-prometheus
spec:
  type: NodePort
  selector:
    app: prometheus-app
  ports:
  - protocol: TCP
    port: 9090
    targetPort: 9090
    nodePort: 30050
---
apiVersion: v1
kind: Service
metadata:
  name: sv-grafana
spec:
  type: NodePort
  selector:
    app: grafana-app
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
    nodePort: 30030

---

  apiVersion: v1
  kind: Service
  metadata:
    name: sqlserver
  spec:
    type: NodePort
    selector:
      app: sqlserver
    ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
      nodePort: 31433
---

apiVersion: v1
kind: Service
metadata:
  name: sv-redis
spec:
  type: NodePort
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    nodePort: 30377
